schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

enum authRefreshTokenTypes_enum {
  """Personal access token"""
  pat

  """Regular refresh token"""
  regular
}

"""
Boolean expression to compare columns of type "authRefreshTokenTypes_enum". All fields are combined with logical 'AND'.
"""
input authRefreshTokenTypes_enum_comparison_exp {
  _eq: authRefreshTokenTypes_enum
  _in: [authRefreshTokenTypes_enum!]
  _is_null: Boolean
  _neq: authRefreshTokenTypes_enum
  _nin: [authRefreshTokenTypes_enum!]
}

"""
User refresh tokens. Hasura auth uses them to rotate new access tokens as long as the refresh token is not expired. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authRefreshTokens {
  createdAt: timestamptz!
  expiresAt: timestamptz!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  type: authRefreshTokenTypes_enum!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
order by aggregate values of table "auth.refresh_tokens"
"""
input authRefreshTokens_aggregate_order_by {
  count: order_by
  max: authRefreshTokens_max_order_by
  min: authRefreshTokens_min_order_by
}

"""
Boolean expression to filter rows from the table "auth.refresh_tokens". All fields are combined with a logical 'AND'.
"""
input authRefreshTokens_bool_exp {
  _and: [authRefreshTokens_bool_exp!]
  _not: authRefreshTokens_bool_exp
  _or: [authRefreshTokens_bool_exp!]
  createdAt: timestamptz_comparison_exp
  expiresAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  type: authRefreshTokenTypes_enum_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
order by max() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_max_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  userId: order_by
}

"""
order by min() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_min_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.refresh_tokens"
"""
type authRefreshTokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authRefreshTokens!]!
}

"""Ordering options when selecting data from "auth.refresh_tokens"."""
input authRefreshTokens_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  metadata: order_by
  type: order_by
  user: users_order_by
  userId: order_by
}

"""
select columns of table "auth.refresh_tokens"
"""
enum authRefreshTokens_select_column {
  """column name"""
  createdAt

  """column name"""
  expiresAt

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  type

  """column name"""
  userId
}

"""
Streaming cursor of the table "authRefreshTokens"
"""
input authRefreshTokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRefreshTokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRefreshTokens_stream_cursor_value_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  type: authRefreshTokenTypes_enum
  userId: uuid
}

"""
columns and relationships of "bookmarks"
"""
type bookmarks {
  author_id: uuid!
  id: uuid!
  link: String!
  name: String!
  time: timestamptz!

  """An object relationship"""
  user: users!
}

"""
order by aggregate values of table "bookmarks"
"""
input bookmarks_aggregate_order_by {
  count: order_by
  max: bookmarks_max_order_by
  min: bookmarks_min_order_by
}

"""
Boolean expression to filter rows from the table "bookmarks". All fields are combined with a logical 'AND'.
"""
input bookmarks_bool_exp {
  _and: [bookmarks_bool_exp!]
  _not: bookmarks_bool_exp
  _or: [bookmarks_bool_exp!]
  author_id: uuid_comparison_exp
  id: uuid_comparison_exp
  link: String_comparison_exp
  name: String_comparison_exp
  time: timestamptz_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "bookmarks"
"""
enum bookmarks_constraint {
  """
  unique or primary key constraint on columns "link"
  """
  bookmarks_link_key

  """
  unique or primary key constraint on columns "name"
  """
  bookmarks_name_key

  """
  unique or primary key constraint on columns "id"
  """
  bookmarks_pkey
}

"""
input type for inserting data into table "bookmarks"
"""
input bookmarks_insert_input {
  author_id: uuid
  id: uuid
  link: String
  name: String
  time: timestamptz
}

"""
order by max() on columns of table "bookmarks"
"""
input bookmarks_max_order_by {
  author_id: order_by
  id: order_by
  link: order_by
  name: order_by
  time: order_by
}

"""
order by min() on columns of table "bookmarks"
"""
input bookmarks_min_order_by {
  author_id: order_by
  id: order_by
  link: order_by
  name: order_by
  time: order_by
}

"""
response of any mutation on the table "bookmarks"
"""
type bookmarks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [bookmarks!]!
}

"""
on_conflict condition type for table "bookmarks"
"""
input bookmarks_on_conflict {
  constraint: bookmarks_constraint!
  update_columns: [bookmarks_update_column!]! = []
  where: bookmarks_bool_exp
}

"""Ordering options when selecting data from "bookmarks"."""
input bookmarks_order_by {
  author_id: order_by
  id: order_by
  link: order_by
  name: order_by
  time: order_by
  user: users_order_by
}

"""primary key columns input for table: bookmarks"""
input bookmarks_pk_columns_input {
  id: uuid!
}

"""
select columns of table "bookmarks"
"""
enum bookmarks_select_column {
  """column name"""
  author_id

  """column name"""
  id

  """column name"""
  link

  """column name"""
  name

  """column name"""
  time
}

"""
input type for updating data in table "bookmarks"
"""
input bookmarks_set_input {
  author_id: uuid
  id: uuid
  link: String
  name: String
  time: timestamptz
}

"""
Streaming cursor of the table "bookmarks"
"""
input bookmarks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: bookmarks_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input bookmarks_stream_cursor_value_input {
  author_id: uuid
  id: uuid
  link: String
  name: String
  time: timestamptz
}

"""
update columns of table "bookmarks"
"""
enum bookmarks_update_column {
  """column name"""
  author_id

  """column name"""
  id

  """column name"""
  link

  """column name"""
  name

  """column name"""
  time
}

input bookmarks_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: bookmarks_set_input

  """filter the rows which have to be updated"""
  where: bookmarks_bool_exp!
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """does the column match the given case-insensitive pattern"""
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """does the column NOT match the given pattern"""
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """does the column match the given SQL regular expression"""
  _similar: citext
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete single row from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshToken(id: uuid!): authRefreshTokens

  """
  delete data from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshTokens(
    """filter the rows which have to be deleted"""
    where: authRefreshTokens_bool_exp!
  ): authRefreshTokens_mutation_response

  """
  delete data from the table: "bookmarks"
  """
  delete_bookmarks(
    """filter the rows which have to be deleted"""
    where: bookmarks_bool_exp!
  ): bookmarks_mutation_response

  """
  delete single row from the table: "bookmarks"
  """
  delete_bookmarks_by_pk(id: uuid!): bookmarks

  """
  insert data into the table: "bookmarks"
  """
  insert_bookmarks(
    """the rows to be inserted"""
    objects: [bookmarks_insert_input!]!

    """upsert condition"""
    on_conflict: bookmarks_on_conflict
  ): bookmarks_mutation_response

  """
  insert a single row into the table: "bookmarks"
  """
  insert_bookmarks_one(
    """the row to be inserted"""
    object: bookmarks_insert_input!

    """upsert condition"""
    on_conflict: bookmarks_on_conflict
  ): bookmarks

  """
  update single row of the table: "auth.users"
  """
  updateUser(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "auth.users"
  """
  updateUsers(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update data of the table: "bookmarks"
  """
  update_bookmarks(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmarks_set_input

    """filter the rows which have to be updated"""
    where: bookmarks_bool_exp!
  ): bookmarks_mutation_response

  """
  update single row of the table: "bookmarks"
  """
  update_bookmarks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmarks_set_input
    pk_columns: bookmarks_pk_columns_input!
  ): bookmarks

  """
  update multiples rows of table: "bookmarks"
  """
  update_bookmarks_many(
    """updates to execute, in order"""
    updates: [bookmarks_updates!]!
  ): [bookmarks_mutation_response]

  """
  update multiples rows of table: "auth.users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """An array relationship"""
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """fetch data from the table: "bookmarks" using primary key columns"""
  bookmarks_by_pk(id: uuid!): bookmarks

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

type subscription_root {
  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """
  fetch data from the table in a streaming manner: "auth.refresh_tokens"
  """
  authRefreshTokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authRefreshTokens_stream_cursor_input]!

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """An array relationship"""
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """fetch data from the table: "bookmarks" using primary key columns"""
  bookmarks_by_pk(id: uuid!): bookmarks

  """
  fetch data from the table in a streaming manner: "bookmarks"
  """
  bookmarks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [bookmarks_stream_cursor_input]!

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table in a streaming manner: "auth.users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
User account information. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type users {
  avatarUrl: String!

  """An array relationship"""
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!
  createdAt: timestamptz!
  displayName: String!
  email: citext
  emailVerified: Boolean!
  id: uuid!

  """An array relationship"""
  refreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!
}

"""
Boolean expression to filter rows from the table "auth.users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  avatarUrl: String_comparison_exp
  bookmarks: bookmarks_bool_exp
  createdAt: timestamptz_comparison_exp
  displayName: String_comparison_exp
  email: citext_comparison_exp
  emailVerified: Boolean_comparison_exp
  id: uuid_comparison_exp
  refreshTokens: authRefreshTokens_bool_exp
}

"""
response of any mutation on the table "auth.users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""Ordering options when selecting data from "auth.users"."""
input users_order_by {
  avatarUrl: order_by
  bookmarks_aggregate: bookmarks_aggregate_order_by
  createdAt: order_by
  displayName: order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
}

"""primary key columns input for table: auth.users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.users"
"""
enum users_select_column {
  """column name"""
  avatarUrl

  """column name"""
  createdAt

  """column name"""
  displayName

  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id
}

"""
input type for updating data in table "auth.users"
"""
input users_set_input {
  avatarUrl: String
  displayName: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  avatarUrl: String
  createdAt: timestamptz
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
}

input users_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
